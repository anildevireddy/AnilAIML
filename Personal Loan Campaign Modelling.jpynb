{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "import seaborn as sns\n",
    "\n",
    "import numpy as np\n",
    "from scipy import stats\n",
    "\n",
    "from sklearn import metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Age</th>\n",
       "      <th>Experience</th>\n",
       "      <th>Income</th>\n",
       "      <th>ZIP Code</th>\n",
       "      <th>Family</th>\n",
       "      <th>CCAvg</th>\n",
       "      <th>Education</th>\n",
       "      <th>Mortgage</th>\n",
       "      <th>Personal Loan</th>\n",
       "      <th>Securities Account</th>\n",
       "      <th>CD Account</th>\n",
       "      <th>Online</th>\n",
       "      <th>CreditCard</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>49</td>\n",
       "      <td>91107</td>\n",
       "      <td>4</td>\n",
       "      <td>1.6</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>45</td>\n",
       "      <td>19</td>\n",
       "      <td>34</td>\n",
       "      <td>90089</td>\n",
       "      <td>3</td>\n",
       "      <td>1.5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>39</td>\n",
       "      <td>15</td>\n",
       "      <td>11</td>\n",
       "      <td>94720</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>35</td>\n",
       "      <td>9</td>\n",
       "      <td>100</td>\n",
       "      <td>94112</td>\n",
       "      <td>1</td>\n",
       "      <td>2.7</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>35</td>\n",
       "      <td>8</td>\n",
       "      <td>45</td>\n",
       "      <td>91330</td>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ID  Age  Experience  Income  ZIP Code  Family  CCAvg  Education  Mortgage  \\\n",
       "0   1   25           1      49     91107       4    1.6          1         0   \n",
       "1   2   45          19      34     90089       3    1.5          1         0   \n",
       "2   3   39          15      11     94720       1    1.0          1         0   \n",
       "3   4   35           9     100     94112       1    2.7          2         0   \n",
       "4   5   35           8      45     91330       4    1.0          2         0   \n",
       "\n",
       "   Personal Loan  Securities Account  CD Account  Online  CreditCard  \n",
       "0              0                   1           0       0           0  \n",
       "1              0                   1           0       0           0  \n",
       "2              0                   0           0       0           0  \n",
       "3              0                   0           0       0           0  \n",
       "4              0                   0           0       0           1  "
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('C:\\\\Anil\\\\AI And ML\\\\Bank_Personal_Loan_Modelling.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(5000, 14)\n",
      "Index(['ID', 'Age', 'Experience', 'Income', 'ZIP Code', 'Family', 'CCAvg',\n",
      "       'Education', 'Mortgage', 'Personal Loan', 'Securities Account',\n",
      "       'CD Account', 'Online', 'CreditCard'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "print(df.shape)\n",
    "print(df.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Age</th>\n",
       "      <th>Experience</th>\n",
       "      <th>Income</th>\n",
       "      <th>ZIP Code</th>\n",
       "      <th>Family</th>\n",
       "      <th>CCAvg</th>\n",
       "      <th>Education</th>\n",
       "      <th>Mortgage</th>\n",
       "      <th>Personal Loan</th>\n",
       "      <th>Securities Account</th>\n",
       "      <th>CD Account</th>\n",
       "      <th>Online</th>\n",
       "      <th>CreditCard</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>5000.000000</td>\n",
       "      <td>5000.000000</td>\n",
       "      <td>5000.000000</td>\n",
       "      <td>5000.000000</td>\n",
       "      <td>5000.000000</td>\n",
       "      <td>5000.000000</td>\n",
       "      <td>5000.000000</td>\n",
       "      <td>5000.000000</td>\n",
       "      <td>5000.000000</td>\n",
       "      <td>5000.000000</td>\n",
       "      <td>5000.000000</td>\n",
       "      <td>5000.00000</td>\n",
       "      <td>5000.000000</td>\n",
       "      <td>5000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2500.500000</td>\n",
       "      <td>45.338400</td>\n",
       "      <td>20.104600</td>\n",
       "      <td>73.774200</td>\n",
       "      <td>93152.503000</td>\n",
       "      <td>2.396400</td>\n",
       "      <td>1.937938</td>\n",
       "      <td>1.881000</td>\n",
       "      <td>56.498800</td>\n",
       "      <td>0.096000</td>\n",
       "      <td>0.104400</td>\n",
       "      <td>0.06040</td>\n",
       "      <td>0.596800</td>\n",
       "      <td>0.294000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1443.520003</td>\n",
       "      <td>11.463166</td>\n",
       "      <td>11.467954</td>\n",
       "      <td>46.033729</td>\n",
       "      <td>2121.852197</td>\n",
       "      <td>1.147663</td>\n",
       "      <td>1.747659</td>\n",
       "      <td>0.839869</td>\n",
       "      <td>101.713802</td>\n",
       "      <td>0.294621</td>\n",
       "      <td>0.305809</td>\n",
       "      <td>0.23825</td>\n",
       "      <td>0.490589</td>\n",
       "      <td>0.455637</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>23.000000</td>\n",
       "      <td>-3.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>9307.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1250.750000</td>\n",
       "      <td>35.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>39.000000</td>\n",
       "      <td>91911.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.700000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2500.500000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>64.000000</td>\n",
       "      <td>93437.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.500000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>3750.250000</td>\n",
       "      <td>55.000000</td>\n",
       "      <td>30.000000</td>\n",
       "      <td>98.000000</td>\n",
       "      <td>94608.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.500000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>101.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>5000.000000</td>\n",
       "      <td>67.000000</td>\n",
       "      <td>43.000000</td>\n",
       "      <td>224.000000</td>\n",
       "      <td>96651.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>635.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                ID          Age   Experience       Income      ZIP Code  \\\n",
       "count  5000.000000  5000.000000  5000.000000  5000.000000   5000.000000   \n",
       "mean   2500.500000    45.338400    20.104600    73.774200  93152.503000   \n",
       "std    1443.520003    11.463166    11.467954    46.033729   2121.852197   \n",
       "min       1.000000    23.000000    -3.000000     8.000000   9307.000000   \n",
       "25%    1250.750000    35.000000    10.000000    39.000000  91911.000000   \n",
       "50%    2500.500000    45.000000    20.000000    64.000000  93437.000000   \n",
       "75%    3750.250000    55.000000    30.000000    98.000000  94608.000000   \n",
       "max    5000.000000    67.000000    43.000000   224.000000  96651.000000   \n",
       "\n",
       "            Family        CCAvg    Education     Mortgage  Personal Loan  \\\n",
       "count  5000.000000  5000.000000  5000.000000  5000.000000    5000.000000   \n",
       "mean      2.396400     1.937938     1.881000    56.498800       0.096000   \n",
       "std       1.147663     1.747659     0.839869   101.713802       0.294621   \n",
       "min       1.000000     0.000000     1.000000     0.000000       0.000000   \n",
       "25%       1.000000     0.700000     1.000000     0.000000       0.000000   \n",
       "50%       2.000000     1.500000     2.000000     0.000000       0.000000   \n",
       "75%       3.000000     2.500000     3.000000   101.000000       0.000000   \n",
       "max       4.000000    10.000000     3.000000   635.000000       1.000000   \n",
       "\n",
       "       Securities Account  CD Account       Online   CreditCard  \n",
       "count         5000.000000  5000.00000  5000.000000  5000.000000  \n",
       "mean             0.104400     0.06040     0.596800     0.294000  \n",
       "std              0.305809     0.23825     0.490589     0.455637  \n",
       "min              0.000000     0.00000     0.000000     0.000000  \n",
       "25%              0.000000     0.00000     0.000000     0.000000  \n",
       "50%              0.000000     0.00000     1.000000     0.000000  \n",
       "75%              0.000000     0.00000     1.000000     1.000000  \n",
       "max              1.000000     1.00000     1.000000     1.000000  "
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>ID</th>\n",
       "      <td>5000.0</td>\n",
       "      <td>2500.500000</td>\n",
       "      <td>1443.520003</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1250.75</td>\n",
       "      <td>2500.5</td>\n",
       "      <td>3750.25</td>\n",
       "      <td>5000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>5000.0</td>\n",
       "      <td>45.338400</td>\n",
       "      <td>11.463166</td>\n",
       "      <td>23.0</td>\n",
       "      <td>35.00</td>\n",
       "      <td>45.0</td>\n",
       "      <td>55.00</td>\n",
       "      <td>67.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Experience</th>\n",
       "      <td>5000.0</td>\n",
       "      <td>20.104600</td>\n",
       "      <td>11.467954</td>\n",
       "      <td>-3.0</td>\n",
       "      <td>10.00</td>\n",
       "      <td>20.0</td>\n",
       "      <td>30.00</td>\n",
       "      <td>43.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Income</th>\n",
       "      <td>5000.0</td>\n",
       "      <td>73.774200</td>\n",
       "      <td>46.033729</td>\n",
       "      <td>8.0</td>\n",
       "      <td>39.00</td>\n",
       "      <td>64.0</td>\n",
       "      <td>98.00</td>\n",
       "      <td>224.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ZIP Code</th>\n",
       "      <td>5000.0</td>\n",
       "      <td>93152.503000</td>\n",
       "      <td>2121.852197</td>\n",
       "      <td>9307.0</td>\n",
       "      <td>91911.00</td>\n",
       "      <td>93437.0</td>\n",
       "      <td>94608.00</td>\n",
       "      <td>96651.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Family</th>\n",
       "      <td>5000.0</td>\n",
       "      <td>2.396400</td>\n",
       "      <td>1.147663</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.00</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CCAvg</th>\n",
       "      <td>5000.0</td>\n",
       "      <td>1.937938</td>\n",
       "      <td>1.747659</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.70</td>\n",
       "      <td>1.5</td>\n",
       "      <td>2.50</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Education</th>\n",
       "      <td>5000.0</td>\n",
       "      <td>1.881000</td>\n",
       "      <td>0.839869</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.00</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mortgage</th>\n",
       "      <td>5000.0</td>\n",
       "      <td>56.498800</td>\n",
       "      <td>101.713802</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>101.00</td>\n",
       "      <td>635.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Personal Loan</th>\n",
       "      <td>5000.0</td>\n",
       "      <td>0.096000</td>\n",
       "      <td>0.294621</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Securities Account</th>\n",
       "      <td>5000.0</td>\n",
       "      <td>0.104400</td>\n",
       "      <td>0.305809</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CD Account</th>\n",
       "      <td>5000.0</td>\n",
       "      <td>0.060400</td>\n",
       "      <td>0.238250</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Online</th>\n",
       "      <td>5000.0</td>\n",
       "      <td>0.596800</td>\n",
       "      <td>0.490589</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CreditCard</th>\n",
       "      <td>5000.0</td>\n",
       "      <td>0.294000</td>\n",
       "      <td>0.455637</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     count          mean          std     min       25%  \\\n",
       "ID                  5000.0   2500.500000  1443.520003     1.0   1250.75   \n",
       "Age                 5000.0     45.338400    11.463166    23.0     35.00   \n",
       "Experience          5000.0     20.104600    11.467954    -3.0     10.00   \n",
       "Income              5000.0     73.774200    46.033729     8.0     39.00   \n",
       "ZIP Code            5000.0  93152.503000  2121.852197  9307.0  91911.00   \n",
       "Family              5000.0      2.396400     1.147663     1.0      1.00   \n",
       "CCAvg               5000.0      1.937938     1.747659     0.0      0.70   \n",
       "Education           5000.0      1.881000     0.839869     1.0      1.00   \n",
       "Mortgage            5000.0     56.498800   101.713802     0.0      0.00   \n",
       "Personal Loan       5000.0      0.096000     0.294621     0.0      0.00   \n",
       "Securities Account  5000.0      0.104400     0.305809     0.0      0.00   \n",
       "CD Account          5000.0      0.060400     0.238250     0.0      0.00   \n",
       "Online              5000.0      0.596800     0.490589     0.0      0.00   \n",
       "CreditCard          5000.0      0.294000     0.455637     0.0      0.00   \n",
       "\n",
       "                        50%       75%      max  \n",
       "ID                   2500.5   3750.25   5000.0  \n",
       "Age                    45.0     55.00     67.0  \n",
       "Experience             20.0     30.00     43.0  \n",
       "Income                 64.0     98.00    224.0  \n",
       "ZIP Code            93437.0  94608.00  96651.0  \n",
       "Family                  2.0      3.00      4.0  \n",
       "CCAvg                   1.5      2.50     10.0  \n",
       "Education               2.0      3.00      3.0  \n",
       "Mortgage                0.0    101.00    635.0  \n",
       "Personal Loan           0.0      0.00      1.0  \n",
       "Securities Account      0.0      0.00      1.0  \n",
       "CD Account              0.0      0.00      1.0  \n",
       "Online                  1.0      1.00      1.0  \n",
       "CreditCard              0.0      1.00      1.0  "
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe().transpose()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ID                    5000\n",
       "Age                     45\n",
       "Experience              47\n",
       "Income                 162\n",
       "ZIP Code               467\n",
       "Family                   4\n",
       "CCAvg                  108\n",
       "Education                3\n",
       "Mortgage               347\n",
       "Personal Loan            2\n",
       "Securities Account       2\n",
       "CD Account               2\n",
       "Online                   2\n",
       "CreditCard               2\n",
       "dtype: int64"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.nunique() # Number of unique values in a column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ID                    0\n",
       "Age                   0\n",
       "Experience            0\n",
       "Income                0\n",
       "ZIP Code              0\n",
       "Family                0\n",
       "CCAvg                 0\n",
       "Education             0\n",
       "Mortgage              0\n",
       "Personal Loan         0\n",
       "Securities Account    0\n",
       "CD Account            0\n",
       "Online                0\n",
       "CreditCard            0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 156,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of People with Zero Mortgage : 3462\n"
     ]
    }
   ],
   "source": [
    "seriesMortgage = df.apply(lambda x: True if x['Mortgage'] == 0 else False, axis=1)\n",
    "Zero_Mortgage = len(seriesMortgage[seriesMortgage == True].index)\n",
    "print('Number of People with Zero Mortgage :', Zero_Mortgage)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of People with Zero CC Avg per Month : 106\n"
     ]
    }
   ],
   "source": [
    "seriesCCAvg = df.apply(lambda x: True if x['CCAvg'] == 0 else False, axis=1)\n",
    "Zero_CCAvg = len(seriesCCAvg[seriesCCAvg == True].index)\n",
    "print('Number of People with Zero CC Avg per Month :', Zero_CCAvg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ID                       int64\n",
       "Age                      int64\n",
       "Experience               int64\n",
       "Income                   int64\n",
       "ZIP Code                 int64\n",
       "Family                category\n",
       "CCAvg                  float64\n",
       "Education             category\n",
       "Mortgage                 int64\n",
       "Personal Loan            int64\n",
       "Securities Account       int64\n",
       "CD Account               int64\n",
       "Online                   int64\n",
       "CreditCard               int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Family'] = df['Family'].astype('category')\n",
    "df['Education'] = df['Education'].astype('category')\n",
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1    0.2944\n",
      "2    0.2592\n",
      "4    0.2444\n",
      "3    0.2020\n",
      "Name: Family, dtype: float64\n",
      "\n",
      "1    0.4192\n",
      "3    0.3002\n",
      "2    0.2806\n",
      "Name: Education, dtype: float64\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Value counts for all categorical columns\n",
    "for i in list(df.columns[df.dtypes=='category']):\n",
    "    print(df[i].value_counts(normalize=True))\n",
    "    print()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Above Categorical value counts defines,\n",
    " \n",
    " 29.44% of the people applied are having family size of 1.\n",
    " 41.92% of of the people are undergraduated.\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Personal Loan  Education  Family  Securities Account\n",
       "0              1          1       0                     613\n",
       "                                  1                      56\n",
       "                          2       0                     583\n",
       "                                  1                      70\n",
       "                          3       0                     272\n",
       "                                  1                      37\n",
       "                          4       0                     325\n",
       "                                  1                      47\n",
       "               2          1       0                     253\n",
       "                                  1                      33\n",
       "                          2       0                     191\n",
       "                                  1                      24\n",
       "                          3       0                     314\n",
       "                                  1                      25\n",
       "                          4       0                     336\n",
       "                                  1                      45\n",
       "               3          1       0                     378\n",
       "                                  1                      32\n",
       "                          2       0                     291\n",
       "                                  1                      31\n",
       "                          3       0                     204\n",
       "                                  1                      25\n",
       "                          4       0                     298\n",
       "                                  1                      37\n",
       "1              1          1       0                       5\n",
       "                                  1                       4\n",
       "                          2       0                       4\n",
       "                          3       0                      34\n",
       "                                  1                       6\n",
       "                          4       0                      36\n",
       "                                  1                       4\n",
       "               2          1       0                      30\n",
       "                                  1                      10\n",
       "                          2       0                      46\n",
       "                                  1                       4\n",
       "                          3       0                      37\n",
       "                                  1                       7\n",
       "                          4       0                      46\n",
       "                                  1                       2\n",
       "               3          1       0                      51\n",
       "                                  1                       7\n",
       "                          2       0                      46\n",
       "                                  1                       6\n",
       "                          3       0                      43\n",
       "                                  1                       6\n",
       "                          4       0                      42\n",
       "                                  1                       4\n",
       "Name: Securities Account, dtype: int64"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby(['Personal Loan','Education','Family'])['Securities Account'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Experience</th>\n",
       "      <th>Income</th>\n",
       "      <th>ZIP Code</th>\n",
       "      <th>Family</th>\n",
       "      <th>CCAvg</th>\n",
       "      <th>Education</th>\n",
       "      <th>Mortgage</th>\n",
       "      <th>Personal Loan</th>\n",
       "      <th>Securities Account</th>\n",
       "      <th>CD Account</th>\n",
       "      <th>Online</th>\n",
       "      <th>CreditCard</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>49</td>\n",
       "      <td>91107</td>\n",
       "      <td>4</td>\n",
       "      <td>1.6</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>45</td>\n",
       "      <td>19</td>\n",
       "      <td>34</td>\n",
       "      <td>90089</td>\n",
       "      <td>3</td>\n",
       "      <td>1.5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>39</td>\n",
       "      <td>15</td>\n",
       "      <td>11</td>\n",
       "      <td>94720</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>35</td>\n",
       "      <td>9</td>\n",
       "      <td>100</td>\n",
       "      <td>94112</td>\n",
       "      <td>1</td>\n",
       "      <td>2.7</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>35</td>\n",
       "      <td>8</td>\n",
       "      <td>45</td>\n",
       "      <td>91330</td>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Age  Experience  Income  ZIP Code Family  CCAvg Education  Mortgage  \\\n",
       "0   25           1      49     91107      4    1.6         1         0   \n",
       "1   45          19      34     90089      3    1.5         1         0   \n",
       "2   39          15      11     94720      1    1.0         1         0   \n",
       "3   35           9     100     94112      1    2.7         2         0   \n",
       "4   35           8      45     91330      4    1.0         2         0   \n",
       "\n",
       "   Personal Loan  Securities Account  CD Account  Online  CreditCard  \n",
       "0              0                   1           0       0           0  \n",
       "1              0                   1           0       0           0  \n",
       "2              0                   0           0       0           0  \n",
       "3              0                   0           0       0           0  \n",
       "4              0                   0           0       0           1  "
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#ID column has all unique values and it is not a continous column, so we can drop it.\n",
    "df = df.drop('ID', axis=1)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#distplot for continous columns\n",
    "#Univariate Analysis\n",
    "for i in ['Income','Age','CCAvg','Mortgage']:\n",
    "    sns.distplot(df[i])\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 437.5x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.FacetGrid(df,hue=\"Personal Loan\", height = 5).map(sns.distplot,\"Age\").add_legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x = df['Education'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x = df['Family'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Experience</th>\n",
       "      <th>Income</th>\n",
       "      <th>ZIP Code</th>\n",
       "      <th>CCAvg</th>\n",
       "      <th>Mortgage</th>\n",
       "      <th>Securities Account</th>\n",
       "      <th>CD Account</th>\n",
       "      <th>Online</th>\n",
       "      <th>CreditCard</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Personal Loan</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>45.367257</td>\n",
       "      <td>20.132301</td>\n",
       "      <td>66.237389</td>\n",
       "      <td>93152.428761</td>\n",
       "      <td>1.729009</td>\n",
       "      <td>51.789381</td>\n",
       "      <td>0.102212</td>\n",
       "      <td>0.035841</td>\n",
       "      <td>0.595796</td>\n",
       "      <td>0.293584</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>45.066667</td>\n",
       "      <td>19.843750</td>\n",
       "      <td>144.745833</td>\n",
       "      <td>93153.202083</td>\n",
       "      <td>3.905354</td>\n",
       "      <td>100.845833</td>\n",
       "      <td>0.125000</td>\n",
       "      <td>0.291667</td>\n",
       "      <td>0.606250</td>\n",
       "      <td>0.297917</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     Age  Experience      Income      ZIP Code     CCAvg  \\\n",
       "Personal Loan                                                              \n",
       "0              45.367257   20.132301   66.237389  93152.428761  1.729009   \n",
       "1              45.066667   19.843750  144.745833  93153.202083  3.905354   \n",
       "\n",
       "                 Mortgage  Securities Account  CD Account    Online  \\\n",
       "Personal Loan                                                         \n",
       "0               51.789381            0.102212    0.035841  0.595796   \n",
       "1              100.845833            0.125000    0.291667  0.606250   \n",
       "\n",
       "               CreditCard  \n",
       "Personal Loan              \n",
       "0                0.293584  \n",
       "1                0.297917  "
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Bivariate\n",
    "df.groupby([\"Personal Loan\"]).mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Experience</th>\n",
       "      <th>Income</th>\n",
       "      <th>ZIP Code</th>\n",
       "      <th>CCAvg</th>\n",
       "      <th>Mortgage</th>\n",
       "      <th>Securities Account</th>\n",
       "      <th>CD Account</th>\n",
       "      <th>Online</th>\n",
       "      <th>CreditCard</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Personal Loan</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>45.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>59.0</td>\n",
       "      <td>93437.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>45.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>142.5</td>\n",
       "      <td>93407.0</td>\n",
       "      <td>3.8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                Age  Experience  Income  ZIP Code  CCAvg  Mortgage  \\\n",
       "Personal Loan                                                        \n",
       "0              45.0        20.0    59.0   93437.0    1.4       0.0   \n",
       "1              45.0        20.0   142.5   93407.0    3.8       0.0   \n",
       "\n",
       "               Securities Account  CD Account  Online  CreditCard  \n",
       "Personal Loan                                                      \n",
       "0                             0.0         0.0     1.0         0.0  \n",
       "1                             0.0         0.0     1.0         0.0  "
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby([\"Personal Loan\"]).median()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Some insights from above data:\n",
    "\n",
    "It seems High income people accepted personal loans from previous campaign\n",
    "Age has no impact"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Personal Loan</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Education</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.443142</td>\n",
       "      <td>0.193750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.270133</td>\n",
       "      <td>0.379167</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.286726</td>\n",
       "      <td>0.427083</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Personal Loan         0         1\n",
       "Education                        \n",
       "1              0.443142  0.193750\n",
       "2              0.270133  0.379167\n",
       "3              0.286726  0.427083"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.crosstab(df['Education'],df['Personal Loan'],normalize='columns')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It seems highly educated people are taking personal loans when compared to under graduates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Personal Loan</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Family</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.301991</td>\n",
       "      <td>0.222917</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.263274</td>\n",
       "      <td>0.220833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.194027</td>\n",
       "      <td>0.277083</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.240708</td>\n",
       "      <td>0.279167</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Personal Loan         0         1\n",
       "Family                           \n",
       "1              0.301991  0.222917\n",
       "2              0.263274  0.220833\n",
       "3              0.194027  0.277083\n",
       "4              0.240708  0.279167"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.crosstab(df['Family'],df['Personal Loan'],normalize='columns')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Number of family numbers have nominal impact with taking the personal loan"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAX4AAAEGCAYAAABiq/5QAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAPRklEQVR4nO3df6xfdX3H8efLi2ipQ0UuTS1idbfKjAk/vCrE36AGf4I6N1mWVUckJltXNZtB94/bMjJjsth0ixn+mI1zUzBDmGEiq7KyTZBbqApSxh0D5IptBRVoO36U9/64p1La0l5qzz339vN8JOT7PaffH++Wb5/fc0+/33NSVUiS2vGkoQeQJM0uwy9JjTH8ktQYwy9JjTH8ktSYw4YeYCaOPvroWrp06dBjSNK8sn79+p9W1eju6+dF+JcuXcrExMTQY0jSvJLk9r2td1ePJDXG8EtSYwy/JDXG8EtSYwy/JDXG8EtSYwy/JDVmXnyO/1CwevVqJicnhx6DqakpAJYsWTLoHGNjY6xYsWLQGaRWGf7GbN++fegRJA3M8M+SubJ1u3LlSgBWrVo18CSShuI+fklqjOGXpMYYfklqjOGXpMYYfklqjOGXpMb4cU5Jc+ILhnPly4Vw6H/B0PBLmhP8cuHsMfyS5sTWrV8unD3u45ekxhh+SWqM4Zekxhh+SWqM4Zekxhh+SWqM4Zekxhh+SWqM4Zekxhh+SWqM4Zekxhh+SWqM4Zekxhh+SWqM4Zekxhh+SWqM4Zekxhh+SWpMr+FP8owkX02yMclNSU5NclSSK5Lc0l0+s88ZJEmP1fcW/yrgG1V1PHACcBNwHrC2qpYBa7tlSdIs6S38SY4EXg18DqCqHqyqnwNnAmu6m60BzuprBknSnvrc4n8+sAX4+yTXJ/lskoXAoqq6C6C7PGZvd05ybpKJJBNbtmzpcUxJakuf4T8MOBn4dFWdBGzlCezWqaoLqmq8qsZHR0f7mlGSmtNn+O8E7qyqa7rlrzL9RrApyWKA7nJzjzNIknbTW/ir6ifAj5K8sFt1OvBD4FJgebduOXBJXzNIkvZ0WM+PvwL4UpLDgVuB9zH9ZnNhknOAO4B39zyDJGkXvYa/qjYA43v5pdP7fF5J0uPzm7uS1BjDL0mNMfyS1BjDL0mNMfyS1BjDL0mNMfyS1BjDL0mNMfyS1BjDL0mNMfyS1BjDL0mNMfyS1BjDL0mNMfyS1JhU1dAz7Nf4+HhNTEwc8P1Xr17N5OTkQZxo/tr55zA2NjbwJHPD2NgYK1asGOz5fW0+ytfmYx2M12aS9VW1xzlR+j4D15wwOTnJhhtuYscRRw09yuCe9OD0G/36WzcNPMnwRrbdM/QITE5OcsuN13Pc03YMPcrgDn9oegfEA7cf+EbeoeKO+0d6ffwmwg+w44ij2H78m4ceQ3PIgo2XDT0CAMc9bQcfO/neocfQHHL+dUf2+vju45ekxhh+SWqM4Zekxhh+SWqM4Zekxhh+SWqM4Zekxhh+SWqM4Zekxhh+SWqM4Zekxhh+SWqM4Zekxhh+SWqM4Zekxhh+SWqM4ZekxvR6Bq4ktwH3ATuAh6tqPMlRwFeApcBtwG9V1c/6nEOS9KjZ2OJ/XVWduMsJf88D1lbVMmBttyxJmiVD7Oo5E1jTXV8DnDXADJLUrL7DX8A3k6xPcm63blFV3QXQXR7T8wySpF30uo8feEVV/TjJMcAVSTbO9I7dG8W5AMcdd1xf80lSc3rd4q+qH3eXm4GLgZcBm5IsBuguNz/OfS+oqvGqGh8dHe1zTElqSm/hT7Iwya/tvA68EbgBuBRY3t1sOXBJXzNIkvbU566eRcDFSXY+zz9W1TeSXAtcmOQc4A7g3T3OIEnaTW/hr6pbgRP2sv5u4PS+nleStG9+c1eSGmP4Jakxhl+SGmP4Jakxhl+SGmP4Jakxhl+SGmP4Jakxhl+SGmP4Jakxhl+SGrPf8CdZlORzSf61W35Rd4A1SdI8NJMt/i8AlwPP7pb/G/hgXwNJkvo1k/AfXVUXAo8AVNXDwI5ep5Ik9WYm4d+a5FlMnz+XJKcAv+h1KklSb2ZyPP4PM33WrF9P8p/AKPCbvU4lSerNfsNfVdcleQ3wQiDAzVX1UO+THURTU1OMbPsFCzZeNvQomkNGtt3N1NTDg84wNTXF1vtGOP+6IwedQ3PL7feNsHBqqrfH32/4k7xzt1UvSPIL4AfdSdQlSfPITHb1nAOcCny7W34tcDXTbwB/XlVf7Gm2g2bJkiX85IHD2H78m4ceRXPIgo2XsWTJokFnWLJkCQ88fBcfO/neQefQ3HL+dUfylCVLenv8mYT/EeA3qmoTTH+uH/g08HJgHTDnwy9JetRMPtWzdGf0O5uBF1TVPcC82tcvSZrZFv9VSb4OXNQtvwtYl2Qh8PPeJpMk9WIm4f8D4J3AK7vl7wKLq2or8Lq+BpMk9WO/u3qqqoD/YXq3zjuA04Gbep5LktSTx93iT/IC4D3A2cDdwFeAVJVb+ZI0j+1rV89G4CrgbVU1CZDkQ7MylSSpN/va1fMu4CfAt5N8JsnpTH9zV5I0jz1u+Kvq4qr6beB44ErgQ8CiJJ9O8sZZmk+SdJDN5B93t1bVl6rqrcCxwAbgvN4nkyT14gmderGq7qmqv6uq0/oaSJLUL8+5K0mNMfyS1BjDL0mNMfyS1BjDL0mNMfyS1Jjew59kJMn13aGdSXJUkiuS3NJdPrPvGSRJj5qNLf6VPPZonucBa6tqGbAWvwwmSbOq1/AnORZ4C/DZXVafCazprq8BzupzBknSY/W9xf8p4CNMn7d3p0VVdRdAd3lMzzNIknbRW/iTvBXYXFXrD/D+5yaZSDKxZcuWgzydJLWrzy3+VwBvT3Ib8GXgtCT/AGxKshigu9y8tztX1QVVNV5V46Ojoz2OKUlt6S38VfXRqjq2qpYyfSavb1XV7wKXAsu7my0HLulrBknSnob4HP9fAW9Icgvwhm5ZkjRL9nXqxYOmqq5k+mQuVNXdTJ+wXZI0AL+5K0mNMfyS1BjDL0mNMfyS1BjDL0mNMfyS1BjDL0mNMfyS1BjDL0mNMfyS1BjDL0mNMfyS1BjDL0mNMfyS1BjDL0mNMfyS1JhZORHLXDCy7R4WbLxs6DEG96T/uxeAR5565MCTDG9k2z3AoqHH4I77Rzj/Ov9/bNo2vR266IhHBp5keHfcP8KyHh+/ifCPjY0NPcKcMTl5HwBjzx8+eMNbNPhrY+jnn0senJwE4CnP9c9kGf2+NlJVvT34wTI+Pl4TExNDj3FIWLlyJQCrVq0aeBLpsXxtHnxJ1lfV+O7r3ccvSY0x/JLUGMMvSY0x/JLUGMMvSY0x/JLUGMMvSY0x/JLUGMMvSY0x/JLUGMMvSY0x/JLUGMMvSY0x/JLUGMMvSY0x/JLUGMMvSY3pLfxJnprku0m+l+TGJH/WrT8qyRVJbukun9nXDJKkPfW5xf8AcFpVnQCcCJyR5BTgPGBtVS0D1nbLkqRZ0lv4a9r93eKTu/8KOBNY061fA5zV1wySpD31uo8/yUiSDcBm4IqqugZYVFV3AXSXxzzOfc9NMpFkYsuWLX2OKUlN6TX8VbWjqk4EjgVeluTFT+C+F1TVeFWNj46O9jekJDVmVj7VU1U/B64EzgA2JVkM0F1uno0ZJEnT+vxUz2iSZ3TXFwCvBzYClwLLu5stBy7pawZJ0p4O6/GxFwNrkoww/QZzYVV9Pcl3gAuTnAPcAby7xxkkSbvpLfxV9X3gpL2svxs4va/nlSTtm9/claTGGH5Jaozhl6TGGH5Jaozhl6TGGH5Jaozhl6TGGH5Jaozhl6TGGH5Jaozhl6TG9HmQNknzxOrVq5mcnBx0hp3Pv3LlykHnABgbG2PFihVDj9Ebwy9pTliwYMHQIzTD8Es6pLdutSf38UtSYwy/JDXG8EtSYwy/JDXG8EtSYwy/JDXG8EtSYwy/JDXG8EtSYwy/JDXG8EtSYzxWzyyZC0c/hLlzBMRD/eiH0lxm+BvjERAlGf5Z4tatpLnCffyS1BjDL0mNMfyS1BjDL0mNMfyS1BjDL0mNMfyS1BjDL0mNSVUNPcN+JdkC3D70HIeQo4GfDj2EtBe+Ng+u51bV6O4r50X4dXAlmaiq8aHnkHbna3N2uKtHkhpj+CWpMYa/TRcMPYD0OHxtzgL38UtSY9zil6TGGH5Jaozhb0iSM5LcnGQyyXlDzyPtlOTzSTYnuWHoWVpg+BuRZAT4W+BNwIuAs5O8aNippF/6AnDG0EO0wvC342XAZFXdWlUPAl8Gzhx4JgmAqloH3DP0HK0w/O1YAvxol+U7u3WSGmP425G9rPOzvFKDDH877gSes8vyscCPB5pF0oAMfzuuBZYleV6Sw4H3AJcOPJOkARj+RlTVw8AfApcDNwEXVtWNw04lTUvyT8B3gBcmuTPJOUPPdCjzkA2S1Bi3+CWpMYZfkhpj+CWpMYZfkhpj+CWpMYZf81aSHUk2JLkhyUVJjhh6pp2SvDfJ38x0vTSbDL/ms+1VdWJVvRh4EPjATO6U5LB+x5LmNsOvQ8VVwFiShd2x3a9Ncn2SM+GXW9oXJfkX4JtJFidZt8tPDK/qbnd2kh906z6x88GT3J/kL5N8L8nVSRZ169+W5Jruuf5t5/onKsmHu+e8IckHd1n/tSTrk9yY5Nz9zSPNhOHXvNdtwb8J+AHwp8C3quqlwOuATyZZ2N30VGB5VZ0G/A5weVWdCJwAbEjybOATwGnAicBLk5zV3XchcHVVnQCsA97frf8P4JSqOonpQ11/5ADmfwnwPuDlwCnA+5Oc1P3y71fVS4Bx4I+SPGs/80j75Y+8ms8WJNnQXb8K+BzwX8Dbk/xxt/6pwHHd9Suqaucx368FPp/kycDXqmpDktOAK6tqC0CSLwGvBr7G9K6kr3f3XQ+8obt+LPCVJIuBw4H/PYDfxyuBi6tqa/e8/wy8Crie6di/o7vdc4BlwN37mEfaL8Ov+Wx7t8X+S0kCvKuqbt5t/cuBrTuXq2pdklcDbwG+mOSTwL37eK6H6tHjm+zg0b87q4G/rqpLk7wW+PgB/D72dshsusd7PXBqVW1LciXTb2T7mkfaL3f16FBzObCiewNgl10mj5HkucDmqvoM0z8pnAxcA7wmydHdqSrPBv59P8/3dGCqu778AGdeB5yV5Ihut9Q7mP4J5unAz7roH8/0biDpV+ZWgg41fwF8Cvh+F//bgLfu5XavBf4kyUPA/cDvVdVdST4KfJvprfDLquqS/Tzfx4GLkkwBVwPPm8GM793l3w5gOuhfAL7bLX+2qq5P8kPgA0m+D9zcPb70K/PonJLUGHf1SFJjDL8kNcbwS1JjDL8kNcbwS1JjDL8kNcbwS1Jj/h8JYq8tAq9BsAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#boxplot\n",
    "sns.boxplot(x='Personal Loan', y='Age', data=df)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1dad9c21a30>"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.groupby('Personal Loan')['Age'].mean().plot(kind='bar')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Above two plot shows that age has no impact on people taking personal loans or not"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1dadb024be0>"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXcAAAEDCAYAAADOc0QpAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAPpklEQVR4nO3df6zddX3H8edrraBgprBeutoW281OB2aKXhHndAxkYHC0ZiEpm1tVYmOCv7Y5LfMPTJYmGBfnss0lnTCajcCqU+l0U7sqq2bjx0VQKLW2ESyFSq/i5vwRBHzvj/NFjtdb7r3n3Nvbfvp8/HPO+Xy/3/t9NynPfvvlnNNUFZKktvzcfA8gSZp9xl2SGmTcJalBxl2SGmTcJalBxl2SGrRwvgcAWLRoUa1YsWK+x5Cko8ptt932raoamWzbERH3FStWMDY2Nt9jSNJRJck3DrXN2zKS1CDjLkkNMu6S1CDjLkkNMu6S1CDjLkkNMu6S1CDjLkkNOiI+xCRpeCs2fGq+R2jGvVdeON8jDM0rd0lqkHGXpAZNGfckVyc5mOSuSba9M0klWdS3dnmSvUl2Jzl/tgeWJE1tOlfu1wAXTFxMshw4D9jXt3YasBY4vTvmQ0kWzMqkkqRpmzLuVbUDeGiSTX8JvAuovrXVwPVV9XBV3QPsBc6cjUElSdM30D33JBcB91fVlydsWgrc1/d6f7cmSTqMZvxWyCQnAO8BfnuyzZOs1SRrJFkPrAc49dRTZzqGJOlJDHLl/svASuDLSe4FlgFfSvKL9K7Ul/ftuwx4YLIfUlWbqmq0qkZHRib9h0QkSQOacdyr6s6qOqWqVlTVCnpBf1FVfRPYCqxNcnySlcAq4JZZnViSNKXpvBXyOuC/gecm2Z/k0kPtW1U7gS3A3cCngcuq6rHZGlaSND1T3nOvqkum2L5iwuuNwMbhxpIkDcNPqEpSg4y7JDXIuEtSg4y7JDXIuEtSg4y7JDXIuEtSg4y7JDXIuEtSg4y7JDXIuEtSg4y7JDXIuEtSg4y7JDXIuEtSg4y7JDXIuEtSg4y7JDXIuEtSg4y7JDVoyrgnuTrJwSR39a29P8lXk3wlyceTPLNv2+VJ9ibZneT8uRpcknRo07lyvwa4YMLaNuD5VfVrwNeAywGSnAasBU7vjvlQkgWzNq0kaVqmjHtV7QAemrD22ap6tHt5E7Cse74auL6qHq6qe4C9wJmzOK8kaRpm4577G4F/754vBe7r27a/W5MkHUZDxT3Je4BHgWsfX5pktzrEseuTjCUZGx8fH2YMSdIEA8c9yTrgNcDvV9XjAd8PLO/bbRnwwGTHV9WmqhqtqtGRkZFBx5AkTWKguCe5AHg3cFFV/aBv01ZgbZLjk6wEVgG3DD+mJGkmFk61Q5LrgLOBRUn2A1fQe3fM8cC2JAA3VdWbq2pnki3A3fRu11xWVY/N1fCSpMlNGfequmSS5aueZP+NwMZhhpIkDcdPqEpSg4y7JDXIuEtSg4y7JDXIuEtSg4y7JDXIuEtSg4y7JDXIuEtSg4y7JDXIuEtSg4y7JDXIuEtSg4y7JDXIuEtSg4y7JDXIuEtSg4y7JDXIuEtSg4y7JDVoyrgnuTrJwSR39a2dnGRbkj3d40l92y5PsjfJ7iTnz9XgkqRDm86V+zXABRPWNgDbq2oVsL17TZLTgLXA6d0xH0qyYNamlSRNy5Rxr6odwEMTllcDm7vnm4E1fevXV9XDVXUPsBc4c5ZmlSRN06D33BdX1QGA7vGUbn0pcF/ffvu7tZ+RZH2SsSRj4+PjA44hSZrMbP8P1UyyVpPtWFWbqmq0qkZHRkZmeQxJOrYNGvcHkywB6B4Pduv7geV9+y0DHhh8PEnSIAaN+1ZgXfd8HXBD3/raJMcnWQmsAm4ZbkRJ0kwtnGqHJNcBZwOLkuwHrgCuBLYkuRTYB1wMUFU7k2wB7gYeBS6rqsfmaHZJ0iFMGfequuQQm849xP4bgY3DDCVJGo6fUJWkBhl3SWqQcZekBhl3SWqQcZekBhl3SWqQcZekBhl3SWqQcZekBhl3SWqQcZekBhl3SWqQcZekBhl3SWqQcZekBhl3SWqQcZekBhl3SWqQcZekBg0V9yR/lGRnkruSXJfkqUlOTrItyZ7u8aTZGlaSND0Dxz3JUuBtwGhVPR9YAKwFNgDbq2oVsL17LUk6jIa9LbMQeFqShcAJwAPAamBzt30zsGbIc0iSZmjguFfV/cBfAPuAA8D/VtVngcVVdaDb5wBwymwMKkmavmFuy5xE7yp9JfAs4MQkr5vB8euTjCUZGx8fH3QMSdIkhrkt8yrgnqoar6pHgI8Bvw48mGQJQPd4cLKDq2pTVY1W1ejIyMgQY0iSJhom7vuAs5KckCTAucAuYCuwrttnHXDDcCNKkmZq4aAHVtXNST4KfAl4FLgd2AQ8HdiS5FJ6fwBcPBuDSpKmb+C4A1TVFcAVE5YfpncVL0maJ35CVZIaZNwlqUHGXZIaZNwlqUHGXZIaZNwlqUHGXZIaZNwlqUHGXZIaZNwlqUHGXZIaZNwlqUHGXZIaZNwlqUHGXZIaNNT3uR9rVmz41HyP0JR7r7xwvkeQmuWVuyQ1yLhLUoOMuyQ1yLhLUoOGinuSZyb5aJKvJtmV5GVJTk6yLcme7vGk2RpWkjQ9w165/xXw6ap6HvACYBewAdheVauA7d1rSdJhNHDck/w88ErgKoCq+lFV/Q+wGtjc7bYZWDPskJKkmRnmyv2XgHHgH5LcnuTDSU4EFlfVAYDu8ZRZmFOSNAPDxH0h8CLg76rqDOD7zOAWTJL1ScaSjI2Pjw8xhiRpomHivh/YX1U3d68/Si/2DyZZAtA9Hpzs4KraVFWjVTU6MjIyxBiSpIkGjntVfRO4L8lzu6VzgbuBrcC6bm0dcMNQE0qSZmzY75Z5K3BtkuOArwNvoPcHxpYklwL7gIuHPIckaYaGintV3QGMTrLp3GF+riRpOH5CVZIaZNwlqUHGXZIaZNwlqUHGXZIaZNwlqUHGXZIaZNwlqUHGXZIaZNwlqUHGXZIaZNwlqUHGXZIaZNwlqUHGXZIaZNwlqUHGXZIaZNwlqUHGXZIaNHTckyxIcnuST3avT06yLcme7vGk4ceUJM3EbFy5vx3Y1fd6A7C9qlYB27vXkqTDaKi4J1kGXAh8uG95NbC5e74ZWDPMOSRJMzfslfsHgXcBP+5bW1xVBwC6x1OGPIckaYYGjnuS1wAHq+q2AY9fn2Qsydj4+PigY0iSJjHMlfvLgYuS3AtcD5yT5J+AB5MsAegeD052cFVtqqrRqhodGRkZYgxJ0kQDx72qLq+qZVW1AlgLfK6qXgdsBdZ1u60Dbhh6SknSjMzF+9yvBM5Lsgc4r3stSTqMFs7GD6mqG4Ebu+ffBs6djZ8rSRqMn1CVpAYZd0lqkHGXpAYZd0lqkHGXpAYZd0lqkHGXpAYZd0lqkHGXpAYZd0lqkHGXpAYZd0lqkHGXpAYZd0lqkHGXpAYZd0lqkHGXpAYZd0lqkHGXpAYZd0lq0MBxT7I8yeeT7EqyM8nbu/WTk2xLsqd7PGn2xpUkTccwV+6PAn9SVb8KnAVcluQ0YAOwvapWAdu715Kkw2jguFfVgar6Uvf8/4BdwFJgNbC5220zsGbYISVJMzMr99yTrADOAG4GFlfVAej9AQCcMhvnkCRN39BxT/J04F+Ad1TVd2dw3PokY0nGxsfHhx1DktRnqLgneQq9sF9bVR/rlh9MsqTbvgQ4ONmxVbWpqkaranRkZGSYMSRJEwzzbpkAVwG7quoDfZu2Auu65+uAGwYfT5I0iIVDHPty4A+AO5Pc0a39GXAlsCXJpcA+4OLhRpQkzdTAca+qLwI5xOZzB/25kqTh+QlVSWqQcZekBhl3SWqQcZekBhl3SWqQcZekBhl3SWqQcZekBhl3SWqQcZekBhl3SWqQcZekBhl3SWqQcZekBhl3SWqQcZekBhl3SWqQcZekBhl3SWqQcZekBs1Z3JNckGR3kr1JNszVeSRJP2tO4p5kAfC3wKuB04BLkpw2F+eSJP2subpyPxPYW1Vfr6ofAdcDq+foXJKkCRbO0c9dCtzX93o/8NL+HZKsB9Z3L7+XZPcczXIsWgR8a76HmEreN98TaB74e3N2PftQG+Yq7plkrX7qRdUmYNMcnf+YlmSsqkbnew5pIn9vHj5zdVtmP7C87/Uy4IE5OpckaYK5ivutwKokK5McB6wFts7RuSRJE8zJbZmqejTJW4DPAAuAq6tq51ycS5PydpeOVP7ePExSVVPvJUk6qvgJVUlqkHGXpAYZd0lq0Fy9z12HUZLn0fsE8FJ6nyd4ANhaVbvmdTBJ88Yr96NcknfT+3qHALfQextqgOv8wjYdyZK8Yb5naJnvljnKJfkacHpVPTJh/ThgZ1Wtmp/JpCeXZF9VnTrfc7TK2zJHvx8DzwK+MWF9SbdNmjdJvnKoTcDiwznLsca4H/3eAWxPsocnvqztVOA5wFvmbSqpZzFwPvCdCesB/uvwj3PsMO5Huar6dJJfofc1y0vp/UezH7i1qh6b1+Ek+CTw9Kq6Y+KGJDce/nGOHd5zl6QG+W4ZSWqQcZekBhl3HbGSPJbkjiR3JflIkhPme6bHJXl9kr+Z7rp0uBl3Hcl+WFUvrKrnAz8C3jydg5L4RgEd84y7jhZfAJ6T5MQkVye5NcntSVbDT66YP5LkX4HPJlmSZEfflf8ruv0uSXJnt/aTfykzyfeSbEzy5SQ3JVncrf9Okpu7c/3H4+szleSPu3PeleQdfeufSHJbkp3dvyv8pPNI02XcdcTrrsRfDdwJvAf4XFW9BPgt4P1JTux2fRmwrqrOAX4P+ExVvRB4AXBHkmcB7wPOAV4IvCTJmu7YE4GbquoFwA7gTd36F4GzquoMel/z8K4B5n8x8AZ6/0j8WcCbkpzRbX5jVb0YGAXeluQXpphHmhb/+qoj2dOSPP7+6C8AV9H74MtFSd7ZrT+V3oe2ALZV1UPd81uBq5M8BfhEVd2R5BzgxqoaB0hyLfBK4BP0bvt8sjv2NuC87vky4J+TLAGOA+4Z4NfxG8DHq+r73Xk/BrwCuJ1e0F/b7bccWAV8+0nmkabFuOtI9sPuyvsnkgT43araPWH9pcD3H39dVTuSvBK4EPjHJO8Hvvsk53qknvjQx2M88d/GXwMfqKqtSc4G3jvAryOTLvZ+3quAl1XVD7oP9Tx1inmkafG2jI42nwHe2kWevtsbPyXJs4GDVfX39K74XwTcDPxmkkVJFgCXAP85xfmeAdzfPV834Mw7gDVJTuhuIb2W3t9EngF8pwv78+jdspFmhVcDOtr8OfBB4Ctd4O8FXjPJfmcDf5rkEeB7wB9W1YEklwOfp3c1/W9VdcMU53sv8JEk9wM3ASunMePr++7lQy/a19D7SmaAD1fV7UnuBt7cfbnW7u7nS7PCrx+QpAZ5W0aSGmTcJalBxl2SGmTcJalBxl2SGmTcJalBxl2SGmTcJalB/w8QYLZyh8Kh+gAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.groupby('Personal Loan')['Income'].mean().plot(kind='bar')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Above graph clearly states that people with high incomes more likely to take personal loans"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1dadb029100>"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.groupby('Personal Loan')['Securities Account'].mean().plot(kind='bar')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1dadb0e3670>"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.groupby('Personal Loan')['Family'].mean().plot(kind='bar')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1dad88f84f0>"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(df.corr(),cmap='Oranges', annot=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Experience</th>\n",
       "      <th>Income</th>\n",
       "      <th>ZIP Code</th>\n",
       "      <th>Family</th>\n",
       "      <th>CCAvg</th>\n",
       "      <th>Mortgage</th>\n",
       "      <th>Personal Loan</th>\n",
       "      <th>Securities Account</th>\n",
       "      <th>CD Account</th>\n",
       "      <th>Online</th>\n",
       "      <th>CreditCard</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>49</td>\n",
       "      <td>91107</td>\n",
       "      <td>4</td>\n",
       "      <td>1.6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>45</td>\n",
       "      <td>19</td>\n",
       "      <td>34</td>\n",
       "      <td>90089</td>\n",
       "      <td>3</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>39</td>\n",
       "      <td>15</td>\n",
       "      <td>11</td>\n",
       "      <td>94720</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>35</td>\n",
       "      <td>9</td>\n",
       "      <td>100</td>\n",
       "      <td>94112</td>\n",
       "      <td>1</td>\n",
       "      <td>2.7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>35</td>\n",
       "      <td>8</td>\n",
       "      <td>45</td>\n",
       "      <td>91330</td>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Age  Experience  Income  ZIP Code  Family  CCAvg  Mortgage  Personal Loan  \\\n",
       "0   25           1      49     91107       4    1.6         0              0   \n",
       "1   45          19      34     90089       3    1.5         0              0   \n",
       "2   39          15      11     94720       1    1.0         0              0   \n",
       "3   35           9     100     94112       1    2.7         0              0   \n",
       "4   35           8      45     91330       4    1.0         0              0   \n",
       "\n",
       "   Securities Account  CD Account  Online  CreditCard  1  2  3  \n",
       "0                   1           0       0           0  1  0  0  \n",
       "1                   1           0       0           0  1  0  0  \n",
       "2                   0           0       0           0  1  0  0  \n",
       "3                   0           0       0           0  0  1  0  \n",
       "4                   0           0       0           1  0  1  0  "
      ]
     },
     "execution_count": 190,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Get one hot encoding of column Education\n",
    "pl_df=df.copy()   #Copy data frame\n",
    "pl_df = df.drop('ID', axis=1)\n",
    "pl_df = df.drop('ID', axis=1)\n",
    "one_hot = pd.get_dummies(pl_df['Education'])\n",
    "pl_df=pl_df.drop('Education',axis=1)\n",
    "pl_df=pl_df.join(one_hot)\n",
    "pl_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Experience</th>\n",
       "      <th>Income</th>\n",
       "      <th>ZIP Code</th>\n",
       "      <th>Family</th>\n",
       "      <th>CCAvg</th>\n",
       "      <th>Mortgage</th>\n",
       "      <th>Personal Loan</th>\n",
       "      <th>Securities Account</th>\n",
       "      <th>CD Account</th>\n",
       "      <th>Online</th>\n",
       "      <th>CreditCard</th>\n",
       "      <th>Undergrad</th>\n",
       "      <th>Graduate</th>\n",
       "      <th>Professional</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>49</td>\n",
       "      <td>91107</td>\n",
       "      <td>4</td>\n",
       "      <td>1.6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>45</td>\n",
       "      <td>19</td>\n",
       "      <td>34</td>\n",
       "      <td>90089</td>\n",
       "      <td>3</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>39</td>\n",
       "      <td>15</td>\n",
       "      <td>11</td>\n",
       "      <td>94720</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>35</td>\n",
       "      <td>9</td>\n",
       "      <td>100</td>\n",
       "      <td>94112</td>\n",
       "      <td>1</td>\n",
       "      <td>2.7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>35</td>\n",
       "      <td>8</td>\n",
       "      <td>45</td>\n",
       "      <td>91330</td>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Age  Experience  Income  ZIP Code  Family  CCAvg  Mortgage  Personal Loan  \\\n",
       "0   25           1      49     91107       4    1.6         0              0   \n",
       "1   45          19      34     90089       3    1.5         0              0   \n",
       "2   39          15      11     94720       1    1.0         0              0   \n",
       "3   35           9     100     94112       1    2.7         0              0   \n",
       "4   35           8      45     91330       4    1.0         0              0   \n",
       "\n",
       "   Securities Account  CD Account  Online  CreditCard  Undergrad  Graduate  \\\n",
       "0                   1           0       0           0          1         0   \n",
       "1                   1           0       0           0          1         0   \n",
       "2                   0           0       0           0          1         0   \n",
       "3                   0           0       0           0          0         1   \n",
       "4                   0           0       0           1          0         1   \n",
       "\n",
       "   Professional  \n",
       "0             0  \n",
       "1             0  \n",
       "2             0  \n",
       "3             0  \n",
       "4             0  "
      ]
     },
     "execution_count": 191,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pl_df.rename(columns = {1:'Undergrad',2:'Graduate',3:'Professional'}, inplace = True)\n",
    "pl_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Experience</th>\n",
       "      <th>Income</th>\n",
       "      <th>ZIP Code</th>\n",
       "      <th>CCAvg</th>\n",
       "      <th>Mortgage</th>\n",
       "      <th>Personal Loan</th>\n",
       "      <th>Securities Account</th>\n",
       "      <th>CD Account</th>\n",
       "      <th>Online</th>\n",
       "      <th>CreditCard</th>\n",
       "      <th>Undergrad</th>\n",
       "      <th>Graduate</th>\n",
       "      <th>Professional</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>49</td>\n",
       "      <td>91107</td>\n",
       "      <td>1.6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>45</td>\n",
       "      <td>19</td>\n",
       "      <td>34</td>\n",
       "      <td>90089</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>39</td>\n",
       "      <td>15</td>\n",
       "      <td>11</td>\n",
       "      <td>94720</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>35</td>\n",
       "      <td>9</td>\n",
       "      <td>100</td>\n",
       "      <td>94112</td>\n",
       "      <td>2.7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>35</td>\n",
       "      <td>8</td>\n",
       "      <td>45</td>\n",
       "      <td>91330</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Age  Experience  Income  ZIP Code  CCAvg  Mortgage  Personal Loan  \\\n",
       "0   25           1      49     91107    1.6         0              0   \n",
       "1   45          19      34     90089    1.5         0              0   \n",
       "2   39          15      11     94720    1.0         0              0   \n",
       "3   35           9     100     94112    2.7         0              0   \n",
       "4   35           8      45     91330    1.0         0              0   \n",
       "\n",
       "   Securities Account  CD Account  Online  CreditCard  Undergrad  Graduate  \\\n",
       "0                   1           0       0           0          1         0   \n",
       "1                   1           0       0           0          1         0   \n",
       "2                   0           0       0           0          1         0   \n",
       "3                   0           0       0           0          0         1   \n",
       "4                   0           0       0           1          0         1   \n",
       "\n",
       "   Professional  1  2  3  4  \n",
       "0             0  0  0  0  1  \n",
       "1             0  0  0  1  0  \n",
       "2             0  1  0  0  0  \n",
       "3             0  1  0  0  0  \n",
       "4             0  0  0  0  1  "
      ]
     },
     "execution_count": 192,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "one_hot = pd.get_dummies(pl_df['Family'])\n",
    "pl_df=pl_df.drop('Family',axis=1)\n",
    "pl_df=pl_df.join(one_hot)\n",
    "pl_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Experience</th>\n",
       "      <th>Income</th>\n",
       "      <th>ZIP Code</th>\n",
       "      <th>CCAvg</th>\n",
       "      <th>Mortgage</th>\n",
       "      <th>Personal Loan</th>\n",
       "      <th>Securities Account</th>\n",
       "      <th>CD Account</th>\n",
       "      <th>Online</th>\n",
       "      <th>CreditCard</th>\n",
       "      <th>Undergrad</th>\n",
       "      <th>Graduate</th>\n",
       "      <th>Professional</th>\n",
       "      <th>Family_1</th>\n",
       "      <th>Family_2</th>\n",
       "      <th>Family_3</th>\n",
       "      <th>Family_4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>49</td>\n",
       "      <td>91107</td>\n",
       "      <td>1.6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>45</td>\n",
       "      <td>19</td>\n",
       "      <td>34</td>\n",
       "      <td>90089</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>39</td>\n",
       "      <td>15</td>\n",
       "      <td>11</td>\n",
       "      <td>94720</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>35</td>\n",
       "      <td>9</td>\n",
       "      <td>100</td>\n",
       "      <td>94112</td>\n",
       "      <td>2.7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>35</td>\n",
       "      <td>8</td>\n",
       "      <td>45</td>\n",
       "      <td>91330</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Age  Experience  Income  ZIP Code  CCAvg  Mortgage  Personal Loan  \\\n",
       "0   25           1      49     91107    1.6         0              0   \n",
       "1   45          19      34     90089    1.5         0              0   \n",
       "2   39          15      11     94720    1.0         0              0   \n",
       "3   35           9     100     94112    2.7         0              0   \n",
       "4   35           8      45     91330    1.0         0              0   \n",
       "\n",
       "   Securities Account  CD Account  Online  CreditCard  Undergrad  Graduate  \\\n",
       "0                   1           0       0           0          1         0   \n",
       "1                   1           0       0           0          1         0   \n",
       "2                   0           0       0           0          1         0   \n",
       "3                   0           0       0           0          0         1   \n",
       "4                   0           0       0           1          0         1   \n",
       "\n",
       "   Professional  Family_1  Family_2  Family_3  Family_4  \n",
       "0             0         0         0         0         1  \n",
       "1             0         0         0         1         0  \n",
       "2             0         1         0         0         0  \n",
       "3             0         1         0         0         0  \n",
       "4             0         0         0         0         1  "
      ]
     },
     "execution_count": 193,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pl_df.rename(columns = {1:'Family_1',2:'Family_2',3:'Family_3',4:'Family_4'}, inplace = True)\n",
    "pl_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [],
   "source": [
    "##Define X and Y variables\n",
    "X = pl_df.drop('Personal Loan', axis=1)\n",
    "Y = pl_df['Personal Loan'].astype('category')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = pd.get_dummies(X,drop_first=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {},
   "outputs": [],
   "source": [
    "##Split into training and test set\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.30,random_state=7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression()"
      ]
     },
     "execution_count": 196,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix, recall_score, precision_score, f1_score, roc_auc_score, accuracy_score\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.metrics import roc_curve,auc\n",
    "logreg = LogisticRegression()\n",
    "logreg.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.93      0.98      0.95      1362\n",
      "           1       0.59      0.30      0.39       138\n",
      "\n",
      "    accuracy                           0.92      1500\n",
      "   macro avg       0.76      0.64      0.67      1500\n",
      "weighted avg       0.90      0.92      0.90      1500\n",
      "\n",
      "0.916\n",
      "[[1333   29]\n",
      " [  97   41]]\n"
     ]
    }
   ],
   "source": [
    "y_pred = logreg.predict(X_test)\n",
    "print(classification_report(y_test,y_pred))\n",
    "print(accuracy_score(y_test,y_pred))\n",
    "print(confusion_matrix(y_test,y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Area under the ROC curve : 0.933484\n"
     ]
    }
   ],
   "source": [
    "LogReg_prob=logreg.predict_proba(X_test)\n",
    "fpr1,tpr1,thresholds1=roc_curve(y_test,LogReg_prob[:,1])\n",
    "roc_auc1=auc(fpr1,tpr1)\n",
    "print(\"Area under the ROC curve : %f\" % roc_auc1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_predict = logreg.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Age</th>\n",
       "      <th>Experience</th>\n",
       "      <th>Income</th>\n",
       "      <th>ZIP Code</th>\n",
       "      <th>Family</th>\n",
       "      <th>CCAvg</th>\n",
       "      <th>Mortgage</th>\n",
       "      <th>Securities Account</th>\n",
       "      <th>CD Account</th>\n",
       "      <th>Online</th>\n",
       "      <th>CreditCard</th>\n",
       "      <th>Undergrad</th>\n",
       "      <th>Graduate</th>\n",
       "      <th>Professional</th>\n",
       "      <th>Observed Personal Loan Status</th>\n",
       "      <th>Predicted Personal Loan Status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3406</th>\n",
       "      <td>3407</td>\n",
       "      <td>42</td>\n",
       "      <td>12</td>\n",
       "      <td>34</td>\n",
       "      <td>92177</td>\n",
       "      <td>3</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>757</th>\n",
       "      <td>758</td>\n",
       "      <td>52</td>\n",
       "      <td>28</td>\n",
       "      <td>81</td>\n",
       "      <td>91745</td>\n",
       "      <td>3</td>\n",
       "      <td>1.8</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3624</th>\n",
       "      <td>3625</td>\n",
       "      <td>58</td>\n",
       "      <td>28</td>\n",
       "      <td>70</td>\n",
       "      <td>92028</td>\n",
       "      <td>1</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4544</th>\n",
       "      <td>4545</td>\n",
       "      <td>28</td>\n",
       "      <td>4</td>\n",
       "      <td>80</td>\n",
       "      <td>95819</td>\n",
       "      <td>3</td>\n",
       "      <td>2.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3235</th>\n",
       "      <td>3236</td>\n",
       "      <td>60</td>\n",
       "      <td>35</td>\n",
       "      <td>39</td>\n",
       "      <td>91711</td>\n",
       "      <td>2</td>\n",
       "      <td>1.6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        ID  Age  Experience  Income  ZIP Code  Family  CCAvg  Mortgage  \\\n",
       "3406  3407   42          12      34     92177       3    2.0         0   \n",
       "757    758   52          28      81     91745       3    1.8         0   \n",
       "3624  3625   58          28      70     92028       1    1.4         0   \n",
       "4544  4545   28           4      80     95819       3    2.5         0   \n",
       "3235  3236   60          35      39     91711       2    1.6         0   \n",
       "\n",
       "      Securities Account  CD Account  Online  CreditCard  Undergrad  Graduate  \\\n",
       "3406                   0           0       0           1          0         0   \n",
       "757                    1           0       0           0          0         1   \n",
       "3624                   0           0       0           0          0         0   \n",
       "4544                   0           0       1           0          1         0   \n",
       "3235                   0           0       1           0          0         0   \n",
       "\n",
       "      Professional Observed Personal Loan Status  \\\n",
       "3406             1                             0   \n",
       "757              0                             0   \n",
       "3624             1                             0   \n",
       "4544             0                             0   \n",
       "3235             1                             0   \n",
       "\n",
       "      Predicted Personal Loan Status  \n",
       "3406                               0  \n",
       "757                                0  \n",
       "3624                               0  \n",
       "4544                               0  \n",
       "3235                               0  "
      ]
     },
     "execution_count": 201,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "z = X_test.copy()\n",
    "z['Observed Personal Loan Status'] = y_test\n",
    "z['Predicted Personal Loan Status'] = y_pred\n",
    "z.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {},
   "outputs": [],
   "source": [
    "##confusion matrix\n",
    "def draw_cm(actual, predicted ):\n",
    "    cm = confusion_matrix(actual, predicted)\n",
    "    sns.heatmap(cm, annot=True, fmt='.2f', xticklabels = [0,1], yticklabels = [0,1] )\n",
    "    plt.ylabel('Observed')\n",
    "    plt.xlabel('Predicted')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training accuracy 0.9057142857142857\n",
      "\n",
      "Testing accuracy 0.916\n",
      "\n",
      "Confusion Matrix\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "None\n",
      "\n",
      "Recall: 0.2971014492753623\n",
      "\n",
      "Precision: 0.5857142857142857\n",
      "\n",
      "F1 Score: 0.3942307692307692\n",
      "\n",
      "Roc Auc Score: 0.6379046159739513\n"
     ]
    }
   ],
   "source": [
    "print(\"Training accuracy\",logreg.score(X_train,y_train))\n",
    "print()\n",
    "print(\"Testing accuracy\",logreg.score(X_test,y_test))\n",
    "print()\n",
    "print('Confusion Matrix')\n",
    "print(draw_cm(y_test,y_predict))\n",
    "print()\n",
    "print(\"Recall:\",recall_score(y_test,y_predict))\n",
    "print()\n",
    "print(\"Precision:\",precision_score(y_test,y_predict))\n",
    "print()\n",
    "print(\"F1 Score:\",f1_score(y_test,y_predict))\n",
    "print()\n",
    "print(\"Roc Auc Score:\",roc_auc_score(y_test,y_predict))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#AUC ROC curve\n",
    "from sklearn.metrics import roc_auc_score\n",
    "from sklearn.metrics import roc_curve\n",
    "\n",
    "logit_roc_auc = roc_auc_score(y_test, logreg.predict(X_test))\n",
    "fpr, tpr, thresholds = roc_curve(y_test, logreg.predict_proba(X_test)[:,1])\n",
    "plt.figure()\n",
    "plt.plot(fpr, tpr, label='Logistic Regression (area = %0.2f)' % logit_roc_auc)\n",
    "plt.plot([0, 1], [0, 1],'r--')\n",
    "plt.xlim([0.0, 1.0])\n",
    "plt.ylim([0.0, 1.05])\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title('Receiver operating characteristic')\n",
    "plt.legend(loc=\"lower right\")\n",
    "plt.savefig('Log_ROC')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Col</th>\n",
       "      <th>Coeff</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Income</td>\n",
       "      <td>0.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Age</td>\n",
       "      <td>0.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Experience</td>\n",
       "      <td>0.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Family</td>\n",
       "      <td>0.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ID</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ZIP Code</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>CCAvg</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Mortgage</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Securities Account</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>CD Account</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Online</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>CreditCard</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Undergrad</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Graduate</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Professional</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Col  Coeff\n",
       "3               Income   0.03\n",
       "1                  Age   0.01\n",
       "2           Experience   0.01\n",
       "5               Family   0.01\n",
       "0                   ID   0.00\n",
       "4             ZIP Code   0.00\n",
       "6                CCAvg   0.00\n",
       "7             Mortgage   0.00\n",
       "8   Securities Account   0.00\n",
       "9           CD Account   0.00\n",
       "10              Online   0.00\n",
       "11          CreditCard   0.00\n",
       "12           Undergrad   0.00\n",
       "13            Graduate   0.00\n",
       "14        Professional   0.00"
      ]
     },
     "execution_count": 205,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Feature Importance or Coefficients \n",
    "fi = pd.DataFrame()\n",
    "fi['Col'] = X_train.columns\n",
    "fi['Coeff'] = np.round(abs(logreg.coef_[0]),2)\n",
    "fi.sort_values(by='Coeff',ascending=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Conclusion: Bank would decide to target people with high income and higher education for offering personal loans."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
